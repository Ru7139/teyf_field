// 00 fetch
use serde_json::json;
use std::io::Write;

const NORMAL_YEAR_DAYS: [i32; 12] = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const LEAP_YEAR_DAYS: [i32; 12] = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
const YEAR_DAYS: [[i32; 12]; 2] = [NORMAL_YEAR_DAYS, LEAP_YEAR_DAYS]; // false, ture

const WEEK_DAY_SAKAMOTO_ARRAY: [i32; 12] = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];

const TUSHARE_URL: &str = "http://api.tushare.pro";
const DAILY_API: &str = "daily";
// const TOKEN_RU: &str = "e1c23bbb77f2cc2ae0169d5f6da2b5b0df3b685763dad71085559c5a";
const TOKEN_FE: &str = "7ec7fdbb1c5d4c384becfdc5bcc0df6932503ea1a858dbf02196dabb";
const NORMAL_FIELDS: &str =
    "ts_code, trade_date ,open, high, low, ,close, pre_close, change, pct_chg, vol, amount";

#[rustfmt::skip]
pub async fn download_tushare_data(
    year: i32,
    folder_path: &str,
    concurrency_num: usize,
) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    // ----- ----- ----- ----- ----- set timer ----- ----- ----- ----- -----
    let timer = std::time::Instant::now();


    // ----- ----- ----- ----- ----- check folder path ----- ----- ----- ----- -----
    let f_path = std::path::Path::new(folder_path);


    // ----- ----- ----- ----- ----- if folder not exist ----- ----- ----- ----- -----
    if !f_path.exists() { std::fs::create_dir_all(f_path).expect("Unalbe to create the folder") }


    // ----- ----- ----- ----- ----- create vec ----- ----- ----- ----- -----
    let mut date_vec: Vec<i32> = Vec::with_capacity(366);
    date_vec.extend(
        YEAR_DAYS[(year % 4 == 0 && (year % 400 == 0 || year % 100 != 0)) as usize]
            .into_iter()
            .enumerate()
            .flat_map(|(m, d)| (1..=d).map(move |x: i32| year * 10000 + (m as i32 + 1) * 100 + x)),
    );


    // ----- ----- ----- ----- ----- concurrent ----- ----- ----- ----- -----
    let counter = std::sync::Arc::new(std::sync::atomic::AtomicUsize::new(0));

    let mut tasks: Vec<tokio::task::
        JoinHandle<Result<(), Box<dyn std::error::Error + Send + Sync>>>> = Vec::new();
    let semaphore = std::sync::Arc::new(tokio::sync::Semaphore::new(concurrency_num));

    let client = reqwest::Client::new();

    for ymd in date_vec.into_iter() {
        let dt = (ymd / 10000, (ymd / 100) % 100, ymd % 100); // date
        let y = if dt.1 >= 3 { dt.0 } else { dt.0 - 1 }; // year adjust
        let ya = y + y / 4 - y / 100 + y / 400; // part formula
        let week_day_num = (ya + WEEK_DAY_SAKAMOTO_ARRAY[(dt.1 - 1) as usize] + dt.2) % 7;

        if week_day_num == 6 || week_day_num == 0 {
            continue;
        } // 如果为周六日则跳过

        let semaphore_clone = std::sync::Arc::clone(&semaphore); // 克隆所需的变量
        let client_clone = client.clone();
        let folder_path_clone = folder_path.to_string();
        let counter_clone = std::sync::Arc::clone(&counter);

        let task = tokio::task::spawn(async move {
            let _permit = semaphore_clone.acquire().await.unwrap(); // 限制并发数量

            let response = client_clone
                .post(TUSHARE_URL)
                .json(&json!({
                    "api_name": DAILY_API,
                    "token": TOKEN_FE,
                    "params": json!({ "start_date": ymd, "end_date": ymd }),
                    "fields": NORMAL_FIELDS
                }))
                .send()
                .await
                .expect("Failed to send request");

            match response.status().is_success() {
                false => {
                    return Err(format!("status code: {}", response.status()).into());
                }
                true => {
                    let file_path =
                        format!("{}/rsps_{}_[{}]", folder_path_clone, ymd, week_day_num);
                    let mut file = std::fs::File::create(file_path).expect("Unable to create file");
                    file.write_all(response.text().await?.as_bytes())
                        .expect("Unable to write");
                }
            }

            let current = counter_clone.fetch_add(1, std::sync::atomic::Ordering::SeqCst) + 1;
            println!("{:3} ---> {:?}", current, timer.elapsed());

            Ok::<(), Box<dyn std::error::Error + Send + Sync>>(())
        });

        tasks.push(task);
    }

    for task in tasks {
        task.await??;


// deserialize

use serde::{Deserialize, Serialize};

// {
//     "request_id":"be79a9b4-f80f-4e76-8df4-c64d68d2bbf1",
//     "code":0,
//     "data":{
//         "fields":["ts_code","trade_date","open","high","low","close","pre_close","change","pct_chg","vol","amount"],
//         "items":[
//             ["600860.SH","20000104",6.68,6.9,6.6,6.79,6.57,0.22,3.35,5916.0,4003.081],
//             ["600701.SH","20000104",11.32,11.8,11.18,11.67,11.23,0.44,3.92,8644.0,10034.544],
//             ["000001.SZ","20000104",17.5,18.55,17.2,18.29,17.45,0.84,4.81,82161.0,147325.3568],
//             ...
//             ...
//         ]
//         "has_more":false,
//         "count":-1
//     },
//     "msg":""
// }

#[derive(Debug, Clone, Serialize, Deserialize)]
struct TushareData {
    request_id: String,
    code: i32,
    data: TushareInnerData,
    msg: String,
}

#[rustfmt::skip]
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TushareInnerData {
    pub fields: Vec<String>,
    pub items: Vec<(String, String, f64, f64, f64, f64, Option<f64>, Option<f64>, Option<f64>, f64, Option<f64>)>,
    // "ts_code","trade_date","open","high","low","close","pre_close","change","pct_chg","vol","amount"
}

fn deserialize_tushare_file_to_vec(
    tushare_file_path: &str,
) -> Result<TushareInnerData, Box<dyn std::error::Error>> {
    use std::fs::read_to_string;

    let file: String = read_to_string(tushare_file_path).expect("Unable to read tushare file");
    let t_data: TushareData = serde_json::from_str(&file).expect("Unable to deserialize the file");
    let result = t_data.data.clone();

    Ok(result)
}

#[rustfmt::skip]
pub fn deserialize_folder_tushare_file_to_vec(tushare_folder_path: &str,)
-> Result<Vec<TushareInnerData>, Box<dyn std::error::Error>> {
    let ignored_file = [".DS_Store", "Thumbs.db"];
    let file_path_vec: Vec<std::path::PathBuf> = walkdir::WalkDir::new(tushare_folder_path)
        .into_iter()
        .filter_map(Result::ok)
        .filter(|e| {
            e.file_type().is_file() && !ignored_file.contains(&e.file_name().to_string_lossy().as_ref())
        })
        .map(|e| e.path().to_path_buf())
        .collect();

    let results = file_path_vec
        .into_iter()
        .map(|path| {
            let path_str = path.to_str().ok_or("something wrong with path")?;
            deserialize_tushare_file_to_vec(path_str)
        })
        .collect::<Result<Vec<TushareInnerData>, _>>()?;

    Ok(results)
}


// into database
use futures::StreamExt;
use serde::{Deserialize, Serialize};
use surrealdb::{
    Surreal,
    engine::remote::ws::{Client, Ws},
    opt::auth::Root,
};

use super::func_1_deserialize::TushareInnerData;

#[rustfmt::skip]
pub async fn ws_root_signin_local_sdb(port: u16, user: &str,pass: &str)
-> Result<Surreal<Client>, Box<dyn std::error::Error>> {
    let sdb: Surreal<Client> = Surreal::new::<Ws>(format!("127.0.0.1:{}", port)).await?;
    sdb.signin(Root { username: user, password: pass }).await?;
    Ok(sdb)
}

#[rustfmt::skip]
pub async fn use_ns_db_record_tushareinner(
    sdb: &Surreal<Client>, namespace: &str, database: &str, data: TushareInnerData, concurrent_limit: usize,
) -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    sdb.use_ns(namespace).use_db(database).await?;

    futures::stream::iter(data.items)
        .map(|x| {
            let sdb = sdb.clone();
            let y = x.clone();
            async move { sdb.create((x.1, x.0)).content(SdbStockStruct::from(y)).await }
        })
        .buffer_unordered(concurrent_limit)
        .collect::<Vec<Result<Option<Record>, surrealdb::Error>>>()
        .await
        .into_iter()
        .collect::<Result<Vec<_>, _>>()?;

    Ok(())
}

#[rustfmt::skip]
#[derive(Debug, Clone, Serialize, Deserialize)]
struct SdbStockStruct { code: String, date: u32, open: f64, high: f64, low: f64, close: f64, pre_close: Option<f64>, change: Option<f64>, chg_percent: Option<f64>, vol: f64, amount: Option<f64> }

#[rustfmt::skip]
impl From<(String, String, f64, f64, f64, f64, Option<f64>, Option<f64>, Option<f64>, f64, Option<f64>)> for SdbStockStruct
{   // "ts_code","trade_date","open","high","low","close","pre_close","change","pct_chg","vol","amount"
    fn from(i: (String, String, f64, f64, f64, f64, Option<f64>, Option<f64>, Option<f64>, f64, Option<f64>))
    -> Self {
        let date_u32 = i.1.parse::<u32>().unwrap();
        SdbStockStruct {code: i.0, date: date_u32, open: i.2, high: i.3, low: i.4, close: i.5, pre_close: i.6, change: i.7, chg_percent: i.8, vol: i.9, amount: i.10}
    }
}

#[rustfmt::skip]
#[derive(Debug, Clone, Serialize, Deserialize)]
struct Record { id: surrealdb::RecordId }




    } // 等待所有任务完成

    dbg!(timer.elapsed());
    Ok(())
}




// main block

mod func;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {
    // download tushare file
    // for i in 1991..=2024 {
    //     let path = format!("src\\download_folder\\{}", i); // use cargo run instelled of testing
    //     func::func_0_fetch::download_tushare_data(i, &path, 10).await?;
    //     dbg!("Sleeping", i);
    //     std::thread::sleep(std::time::Duration::from_secs(60));
    // }

    // for i in 1991..=2024 {
    //     let timer = std::time::Instant::now();
    //     let download_path = format!("src\\download_folder\\{}\\", i);
    //     let vec =
    //         func::func_1_deserialize::deserialize_folder_tushare_file_to_vec(&download_path).unwrap();
    //     println!(
    //         "Year {i} ---> {} Days converted with {:?}",
    //         vec.len(),
    //         timer.elapsed()
    //     );
    // }

    // let timer = std::time::Instant::now();
    let sdb = func::func_2_into_sdb::ws_root_signin_local_sdb(12345, "ruut", "ruut")
        .await
        .expect("Unable to connect db");
    let path = "src\\download_folder\\2001\\";
    let tushare_inner_data =
        func::func_1_deserialize::deserialize_folder_tushare_file_to_vec(path).unwrap();
    // dbg!(&timer.elapsed());

    for x in tushare_inner_data {
        // let timer = std::time::Instant::now();
        func::func_2_into_sdb::use_ns_db_record_tushareinner(
            &sdb, "fe_teach", "Mine2001", x, 1usize,
        )
        .await?;
        // dbg!(&timer.elapsed());
    }
    // dbg!(&timer.elapsed());

    Ok(())
}
